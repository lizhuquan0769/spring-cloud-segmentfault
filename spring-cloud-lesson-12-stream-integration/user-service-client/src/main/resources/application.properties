spring.application.name=user-service-client
server.port=8080
management.security.enabled=false

# 白名单方式配置ribbon，使用eureka服务发现后，这里可以注释掉
#user-service-provider.ribbon.listOfServers=http://${provider.service.host}:${provider.service.port}
user-service-provider.ribbon.NFLoadBalancerPingClassName=com.segmentfault.spring.cloud.lesson12.user.service.client.ping.MyPing

### 以下内容由config-server提供
#provider.service.name=user-service-provider
#provider.service.host=localhost
#provider.service.port=9090
##配置@FiegnClient(name = "${user.service.name}")中的占位符，user.service.name实际需要指定UserService接口的提供方
#user.service.name=${provider.service.name}

### Kafka 生产者配置
#spring.kafka.BOOTSTRAP-SERVERS=localhost:9092
#spring.kafka.consumer.group-id=sf-group
#spring.kafka.consumer.clientId=user-service-client
## 生产者 值的序列化
#spring.kafka.producer.valueSerializer =com.segumentfault.spring.cloud.lesson12.user.service.client.serializer.ObjectSerializer

### Spring Cloud Stream 配置 ###
spring.cloud.stream.binders.local_rabbit.type=rabbit
spring.cloud.stream.binders.local_rabbit.environment.spring.rabbitmq.addresses=amqp://172.25.50.28:5672
spring.cloud.stream.binders.local_rabbit.environment.spring.rabbitmq.username=root
spring.cloud.stream.binders.local_rabbit.environment.spring.rabbitmq.password=root
spring.cloud.stream.binders.local_rabbit.environment.spring.rabbitmq.virtual-host=/
spring.cloud.stream.bindings.output.binder=local_rabbit
# exchange的名称
spring.cloud.stream.bindings.output.destination=ex_test
# exchange的类型
spring.cloud.stream.rabbit.bindings.output.producer.exchangeType=fanout

