spring.application.name=spring-cloud-eureka-server
server.port=10010
management.security.enabled=false

#################### 提高Eureka Server对服务上下线的灵敏度检测。 ####################
#   启动Eureka Server的主动失效机制，并设置主动失效检测周期
#   服务提供者注册服务后，会定时向Eureka Server发起心跳（由服务提供者的eureka.instance.lease-renewal-interval-in-seconds参数设置，默认30秒），
# 并告诉Eureka Server该注册信息的失效时间（由服务提供者的eureka.instance.lease-expiration-duration-in-seconds设置，作用于Eureka Server的主动失效机制，默认90秒）。
#   也就是说，主动失效机制执行时，会检查服务提供者的租约在租期内是否有效，失效则剔除。
#   所以，该参数设置得越短，失效的服务提供者被剔除得越快，默认60秒。
eureka.server.eviction-interval-timer-in-ms=3000

#   配置Eureka Server的ReadOnlyMap刷新周期。
#   注意：服务调用者从Eureka Server同步ServiceInstance时，是从ReadOnlyMap读取的，
# 所以，该参数决定了ReadOnlyMap多久同步ReadOnlyMap，周期越短，表示Eureka Client获取最新的ReadWriteMap越快，默认是30秒。
eureka.server.response-cache-update-interval-ms=3000

#   配置Eureka Server的ReadWriteMap的失效时间。
#   ReadWriteMap是一个Guava Cache的实现，可以配置自动失效时间，失效后，需要读取时会从registry重新读取ServiceInstance，然后填充到ReadWriteMap，registry是一个ConcurrentHashMap实现，
# 由于配置启动了eureka.server.eviction-interval-timer-in-ms，evict时会同步清理resitry和ReadWriteMap的ServiceInstance，所以不需要改动这个配置，默认是180秒。
#eureka.server.response-cache-auto-expiration-in-seconds=180

# 关闭自我保护机制，中小型应用，同机房网络一般不会出现问题，可以选择关闭
#eureka.server.enable-self-preservation=false

# 心跳阀值重置周期
eureka.server.renewal-threshold-update-interval-ms=300000
#################### 提高Eureka Server对服务上下线的灵敏度检测。 ####################

# 单机Eureka Server场景下，取消向Eureka Server注册ServiceInstance信息
eureka.client.register-with-eureka=false
# 单机Eureka Server场景下，取消从Eureka Server拉取ServiceInstance信息
eureka.client.fetch-registry=false
eureka.client.service-url.defaultZone=http://localhost:${server.port}/eureka/


logging.level.root=WARN